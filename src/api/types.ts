/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getHello'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getCurrentUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/login-with-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_loginWithPassword'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AuthController_refreshTokens'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/sign-up-with-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_signUpWithPassword'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/change-business': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_changeBusiness'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/set-default-business': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_setDefaultBusiness'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/zalo-auth-url': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AuthController_getZaloAuthUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/login-with-zalo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['AuthController_loginWithZalo'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user/create-profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['UserController_createProfile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user/update-profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['UserController_updateProfile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/upload/biz-images': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['UploadController_uploadBizImages'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/upload/stamp-template-image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['UploadController_uploadStampTemplateImage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/upload/clone-biz-resource': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['UploadController_cloneBizResource'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/business': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['BusinessController_getBusinessList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/business/current': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['BusinessController_getCurrentBusiness'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/business/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['BusinessController_createBusiness'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/business/update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['BusinessController_updateBusiness'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/biz-user/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['BizUserController_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/biz-user/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['BizUserController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/biz-user/lock/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['BizUserController_lock'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/biz-user/unlock/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['BizUserController_unlock'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/biz-user/change-role': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['BizUserController_changeRole'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/product/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['ProductController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/product/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProductController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/product/list-active': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProductController_findAllActive'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/product/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProductController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/product/edit/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['ProductController_update'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/product/attributes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ProductController_findAttributes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['StampTemplateController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['StampTemplateController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/list-active': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['StampTemplateController_findAllActive'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['StampTemplateController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/edit/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['StampTemplateController_update'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/active/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['StampTemplateController_active'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp-template/inactive/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['StampTemplateController_inactive'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['StampController_checkStamp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/generation/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['GenerationController_generateStamp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/generation/add-preactivate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['GenerationController_generatePreactiveStamp'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/generation/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GenerationController_listGenerationDoc'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/generation/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GenerationController_detailGenerationDoc'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/generation/print-url/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GenerationController_getPrintUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/activation/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['ActivationController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/activation/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ActivationController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/activation/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['ActivationController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/retail/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['RetailController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/retail/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['RetailController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/stamp/retail/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['RetailController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/destruction/add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['DestructionController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/destruction/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['DestructionController_findAll'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/destruction/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['DestructionController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/invitation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['InvitationController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/invitation/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['InvitationController_search'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/invitation/detail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['InvitationController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/invitation/cancel/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['InvitationController_cancel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-invitation/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MyInvitationController_search'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-invitation/detail/{code}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['MyInvitationController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-invitation/accept/{code}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MyInvitationController_acceptInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/my-invitation/reject/{code}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['MyInvitationController_rejectInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/location/provinces': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_getProvinces'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/location/districts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_getDistricts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/location/wards': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LocationController_getWards'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/trace': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['TraceController_trace'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ResponseType: {
      data: Record<string, never>;
      /** @enum {string} */
      status: 'success' | 'error';
      message?: string;
      timestamp: string;
      httpStatus: number;
      messageCode?: string;
    };
    BizDto: {
      id: number;
      name: string;
      logo: string;
      role: number;
    };
    CurrentUserDto: {
      id: number;
      status: number;
      email: string | null;
      phone: string | null;
      full_name: string;
      gender: number | null;
      province_code: number | null;
      district_code: number | null;
      ward_code: number | null;
      address_detail: string | null;
      address_full: string | null;
      avatar: string | null;
      /** Format: date-time */
      date_of_birth: string | null;
      identification_number: string | null;
      identification_issued_place: string | null;
      /** Format: date-time */
      identification_issued_date: string | null;
      biz_id: string | null;
      biz_name: string | null;
      biz_logo: string | null;
      biz_role: number | null;
      managed_bizs: components['schemas']['BizDto'][];
    };
    AuthResponseDto: {
      accessToken: string;
      refreshToken: string;
    };
    LoginWithPasswordDto: {
      identifier: string;
      password: string;
    };
    SignUpWithPasswordDto: {
      phone: string;
      password: string;
      passwordConfirm: string;
    };
    ChangeBusinessDto: {
      bizId: number;
    };
    GetZaloLoginUrlResponseDto: {
      url: string;
    };
    LoginWithZaloDto: {
      authorization_code: string;
      code_challenge: string;
    };
    DefaultDataType: Record<string, never>;
    CreateProfileDto: {
      fullName: string;
      phone: string;
      gender?: number;
      email?: string;
      dateOfBirth?: string;
      provinceCode: string;
      districtCode: string;
      wardCode: string;
      addressDetail: string;
      identificationNumber?: string;
      identificationIssuedPlace?: string;
      identificationIssuedDate?: string;
      /**
       * Format: binary
       * @description Upload avatar, allow file type: jpg, jpeg, png and and size < 2MB
       */
      avatarUpload?: string;
    };
    UpdateProfileDto: {
      gender?: number;
      email?: string;
      dateOfBirth?: string;
      fullName: string;
      provinceCode: string;
      districtCode: string;
      wardCode: string;
      addressDetail: string;
      identificationNumber?: string;
      identificationIssuedPlace?: string;
      identificationIssuedDate?: string;
      /**
       * Format: binary
       * @description Upload avatar, allow file type: jpg, jpeg, png and and size < 2MB
       */
      avatarUpload?: string;
    };
    FileUploadResponseDto: {
      url: string;
      name: string;
    };
    UploadMultipleDto: {
      /** @description The files to upload, max 20Mb, allow jpg, jpeg, png. */
      files: string[];
    };
    UploadOneDto: {
      /**
       * Format: binary
       * @description The file to upload, max 10kb, allow jpg, jpeg, png, svg.
       */
      file: string;
    };
    CloneFileItemDto: {
      fromUrl: string;
      url: string;
      name: string;
    };
    CloneFileResponseDto: {
      items: components['schemas']['CloneFileItemDto'][];
    };
    CloneFileDto: {
      /** @description The urls of files to clone. */
      urls: string[];
    };
    BusinessItemDto: {
      id: number;
      role: number;
      code: string;
      name: string;
      type: number;
      phone: string;
      email: string;
      addressFull: string;
      logo: string;
      shortName: string;
      fullName: string;
      website: string;
      youtube: string;
    };
    DetailBusinessDto: {
      id: number;
      name: string;
      type: number;
      phone: string;
      email: string;
      gcp: string;
      taxCode: string;
      /** @description YYYY-MM-DD */
      businessRegistrationIssuedDate: string;
      businessRegistrationIssuedPlace: string;
      provinceCode: string;
      districtCode: string;
      wardCode: string;
      addressDetail: string;
      addressFull: string;
      logo: string;
      shortName: string;
      fullName: string;
      code: string;
      content: string;
      website: string;
      youtube: string;
      createdBy: string;
      slideImages: string[];
      introImages: string[];
      businessRegistrationScans: string[];
    };
    /** @enum {number} */
    BUSINESS_TYPE: 1 | 2;
    CreateBusinessDto: {
      name: string;
      /** @description 1: Individual, 2: LegalEntity */
      type: components['schemas']['BUSINESS_TYPE'];
      phone: string;
      email?: string;
      gcp?: string;
      taxCode?: string;
      businessRegistrationIssuedDate?: string;
      businessRegistrationIssuedPlace?: string;
      provinceCode: string;
      districtCode: string;
      wardCode: string;
      addressDetail: string;
      /** @description Upload logo, allow file type: jpg, jpeg, png and and size < 2MB */
      logoUpload?: Record<string, never>[];
      /** @description Upload business registration scan, allow file type: jpg, jpeg, png and and size < 2MB */
      businessRegistrationScanUpload?: unknown[][];
    };
    UpdateBusinessDto: {
      name: string;
      /** @description 1: Individual, 2: LegalEntity */
      type: components['schemas']['BUSINESS_TYPE'];
      shortName: string;
      fullName: string;
      phone: string;
      email?: string;
      gcp?: string;
      taxCode?: string;
      /** @description YYYY-MM-DD */
      businessRegistrationIssuedDate?: string;
      businessRegistrationIssuedPlace?: string;
      provinceCode: string;
      districtCode: string;
      wardCode: string;
      addressDetail: string;
      website: string;
      youtube: string;
      content: string;
      logo: string;
      slideImages: string[];
      introImages: string[];
      businessRegistrationScans: string[];
    };
    PaginationInfo: {
      page: number;
      perpage: number;
      totalPages: number;
      totalItems: number;
    };
    Pagination: {
      items: Record<string, never>[];
      pagination: components['schemas']['PaginationInfo'];
    };
    ListBizUserItemDto: {
      id: number;
      fullName: string;
      email: string;
      phone: string;
      status: number;
      role: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
    };
    /** @enum {number} */
    BIZ_USER_ROLE: 1 | 2;
    ChangeRoleDto: {
      bizUserId: number;
      /** @description 1: Owner, 2: User */
      role: components['schemas']['BIZ_USER_ROLE'];
    };
    /** @enum {number} */
    PRODUCT_ATTRIBUTE_TYPE: 1 | 2 | 3;
    ProductAttributeDto: {
      id: number;
      /** @description PRODUCT: 1, ACTIVATION: 2, SALE: 3 */
      type: components['schemas']['PRODUCT_ATTRIBUTE_TYPE'];
      name: string;
      value: string;
      unit: string;
      isRequired: number;
    };
    ProductDetailDto: {
      id: number;
      name: string;
      price: number;
      publicCode: string;
      gtin: string;
      hsCode: string;
      status: number;
      autoActivationSeconds: number;
      autoSaleSeconds: number;
      autoExpireSeconds: number;
      autoExpireExchangeUnit: number;
      youtubeLink: string;
      content: string;
      description: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      createdBy: string;
      slideImages: string[];
      introImages: string[];
      attributes: components['schemas']['ProductAttributeDto'][];
    };
    /** @enum {number} */
    PRODUCT_EXPIRE_EXCHANGE_UNIT: 1 | 2 | 3 | 4;
    CreateProductAttributeDto: {
      /** @description 1: Product, 2: Activation, 3: Sale */
      type: components['schemas']['PRODUCT_ATTRIBUTE_TYPE'];
      name: string;
      value: string;
      unit: string;
    };
    CreateProductDto: {
      name: string;
      price: number;
      gtin: string;
      hsCode: string;
      autoActivationSeconds: number;
      autoSaleSeconds: number;
      autoExpireSeconds: number;
      /** @description 1: Hours, 2: Days, 3: Weeks, 4: Months */
      autoExpireExchangeUnit: components['schemas']['PRODUCT_EXPIRE_EXCHANGE_UNIT'];
      youtubeLink: string;
      content: string;
      description: string;
      slideImages: string[];
      introImages: string[];
      attributes: components['schemas']['CreateProductAttributeDto'][];
    };
    ProductListItemDto: {
      id: number;
      name: string;
      gtin: string;
      publicCode: string;
      price: number;
      status: number;
      hsCode: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      created_by: string;
    };
    ProductListActiveItemDto: {
      id: number;
      name: string;
      gtin: string;
      publicCode: string;
    };
    UpdateProductAttributeDto: {
      id: number;
      /** @description 1: Product, 2: Activation, 3: Sale */
      type: components['schemas']['PRODUCT_ATTRIBUTE_TYPE'];
      name: string;
      value: string;
      unit: string;
    };
    UpdateProductDto: {
      id: number;
      name: string;
      price: number;
      gtin: string;
      hsCode: string;
      autoActivationSeconds: number;
      autoSaleSeconds: number;
      autoExpireSeconds: number;
      /** @description 1: Hours, 2: Days, 3: Weeks, 4: Months */
      autoExpireExchangeUnit: components['schemas']['PRODUCT_EXPIRE_EXCHANGE_UNIT'];
      youtubeLink: string;
      content: string;
      description: string;
      slideImages: string[];
      introImages: string[];
      attributes: components['schemas']['UpdateProductAttributeDto'][];
    };
    /** @enum {string} */
    STAMP_TEMPLATE_SIZE:
      | '15x15-6'
      | '25x15-4'
      | '35x22-3'
      | '46x34-2'
      | '15x15-4'
      | '20x20-3'
      | '30x30-2'
      | '25x15-3'
      | '35x22-2';
    /** @enum {number} */
    STAMP_TEMPLATE_STATUS: 1 | 2;
    /** @enum {number} */
    STAMP_TEMPLATE_DISPLAY_MODE: 1 | 2;
    StampTemplateDetailDto: {
      id: number;
      name: string;
      /** @description 15x15-6, 25x15-4, 35x22-3, 46x34-2, 15x15-4, 20x20-3, 30x30-2, 25x15-3, 35x22-2 */
      size: components['schemas']['STAMP_TEMPLATE_SIZE'];
      /** @description active: 1, inactive: 2 */
      status: components['schemas']['STAMP_TEMPLATE_STATUS'];
      topText: string;
      bottomText: string;
      centerText: string;
      /** @description 1: use image, 2: use date */
      displayMode: components['schemas']['STAMP_TEMPLATE_DISPLAY_MODE'];
      image: string;
      useExpiredDate: number;
      useActivationDate: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      created_by: string;
    };
    CreateStampTemplateDto: {
      name: string;
      /** @description 15x15-6, 25x15-4, 35x22-3, 46x34-2, 15x15-4, 20x20-3, 30x30-2, 25x15-3, 35x22-2 */
      size: components['schemas']['STAMP_TEMPLATE_SIZE'];
      topText: string;
      bottomText: string;
      centerText: string;
      /** @description 1: use image, 2: use date */
      displayMode: components['schemas']['STAMP_TEMPLATE_DISPLAY_MODE'];
      image: string;
      useExpiredDate: number;
      useActivationDate: number;
    };
    StampTemplateListItemDto: {
      id: number;
      name: string;
      /** @description active: 1, inactive: 2 */
      status: components['schemas']['STAMP_TEMPLATE_STATUS'];
      /** @description 15x15-6, 25x15-4, 35x22-3, 46x34-2, 15x15-4, 20x20-3, 30x30-2, 25x15-3, 35x22-2 */
      size: components['schemas']['STAMP_TEMPLATE_SIZE'];
      topText: string;
      bottomText: string;
      centerText: string;
      /** @description 1: use image, 2: use date */
      displayMode: components['schemas']['STAMP_TEMPLATE_DISPLAY_MODE'];
      image: string;
      useExpiredDate: number;
      useActivationDate: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      created_by: string;
    };
    UpdateStampTemplateDto: {
      name: string;
      /** @description 15x15-6, 25x15-4, 35x22-3, 46x34-2, 15x15-4, 20x20-3, 30x30-2, 25x15-3, 35x22-2 */
      size: components['schemas']['STAMP_TEMPLATE_SIZE'];
      topText: string;
      bottomText: string;
      centerText: string;
      /** @description 1: use image, 2: use date */
      displayMode: components['schemas']['STAMP_TEMPLATE_DISPLAY_MODE'];
      image: string;
      useExpiredDate: number;
      useActivationDate: number;
      id: number;
    };
    CheckStampResponseItemDto: {
      bizStampId: string;
      code: string;
      number: number;
      isValid: boolean;
      message: string;
    };
    CheckStampResponseDto: {
      total: number;
      valid: number;
      inValid: number;
      items: components['schemas']['CheckStampResponseItemDto'][];
    };
    /** @enum {string} */
    CHECK_STAMP_MODE: 'single' | 'range';
    /** @enum {string} */
    CHECK_STAMP_TYPE: 'code' | 'bizCountNumber';
    /** @enum {string} */
    CHECK_STAMP_TARGET_STATE: 'activation' | 'retail' | 'destroy';
    CheckStampDto: {
      mode: components['schemas']['CHECK_STAMP_MODE'];
      type: components['schemas']['CHECK_STAMP_TYPE'];
      targetState: components['schemas']['CHECK_STAMP_TARGET_STATE'];
      /**
       * @description Stamp codes or bizCountNumber, required when mode is single
       * @example [
       *       "code1",
       *       "code2"
       *     ]
       */
      codes: string[];
      /**
       * @description Stamp range start, required when mode is range
       * @example 1
       */
      start: string;
      /**
       * @description Stamp range end, required when mode is range
       * @example 10
       */
      end: string;
    };
    DetailGenerationDocStampDto: {
      stampId: number;
      stampCode: string;
      number: number;
    };
    DetailGenerationDocDto: {
      id: number;
      templateId: number;
      templateName: string;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
      stamps: components['schemas']['DetailGenerationDocStampDto'][];
    };
    CreateGenerationDocDto: {
      quantity: number;
      stampTemplateId: number;
      note: string;
    };
    CreateActivationProductAttributeDto: {
      attributeId: number;
      value: string;
    };
    CreatePreactiveDocDto: {
      quantity: number;
      stampTemplateId: number;
      productId: number;
      /** @description Activation attributes */
      activationAttributes: components['schemas']['CreateActivationProductAttributeDto'][];
      note: string;
    };
    ListGenerationDocItemDto: {
      id: number;
      templateId: number;
      templateName: string;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
      printUrl: string;
    };
    PrintUrlDto: {
      printUrl: string;
    };
    DetailActivationDocStampDto: {
      bizStampId: number;
      stampId: number;
      stampCode: string;
      number: number;
    };
    DetailActivationDocDto: {
      id: number;
      productId: number;
      productName: string;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
      stamps: components['schemas']['DetailActivationDocStampDto'][];
    };
    CreateActivationDocDto: {
      productId: number;
      /** @description Activation attributes */
      activationAttributes: components['schemas']['CreateActivationProductAttributeDto'][];
      /**
       * @description biz stamp ids, It return from check stamp API
       * @example [
       *       1,
       *       2
       *     ]
       */
      bizStampIds: string[];
      /** @description Activation note */
      note: string;
    };
    ListActivationDocItemDto: {
      id: number;
      productId: number;
      productName: string;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
    };
    DetailRetailOrderStampDto: {
      bizStampId: number;
      stampId: number;
      stampCode: string;
      skuId: number;
      productId: number;
      productName: string;
    };
    DetailRetailOrderDto: {
      id: number;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
      stamps: components['schemas']['DetailRetailOrderStampDto'][];
    };
    CreateRetailDto: {
      note: string;
      /**
       * @description biz stamp ids, It return from check stamp API
       * @example [
       *       1,
       *       2
       *     ]
       */
      bizStampIds: string[];
    };
    ListRetailOrderItemDto: {
      id: number;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
    };
    DetailDestructionStampDto: {
      bizStampId: number;
      stampId: number;
      stampCode: string;
      skuId: number;
      productId: number;
      productName: string;
    };
    DetailDestructionDto: {
      id: number;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
      stamps: components['schemas']['DetailDestructionStampDto'][];
    };
    CreateDestructionDto: {
      note: string;
      /**
       * @description biz stamp ids, It return from check stamp API
       * @example [
       *       1,
       *       2
       *     ]
       */
      bizStampIds: string[];
    };
    ListDestructionItemDto: {
      id: number;
      quantity: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
    };
    /** @enum {string} */
    InvitationStatus:
      | 'valid'
      | 'not-found'
      | 'waiting-confirm'
      | 'rejected'
      | 'cancelled'
      | 'active'
      | 'inactive';
    CreateInvitationResponseDto: {
      /** @description
       *            valid means this phone is valid and an invitation was sent to this phone,
       *            not-found means this phone not found,
       *            waiting-confirm means user has not confirmed the invitation,
       *            rejected means user has rejected the invitation,
       *            cancelled means the invitation has been cancelled,
       *            active means user has confirmed the invitation and now is active,
       *            inactive means has confirmed the invitation but now is inactive */
      status: components['schemas']['InvitationStatus'];
      name: string;
      phone: string;
      userId: number;
      invitationId: number;
      invitationCode: string;
    };
    CreateInvitationDto: {
      phone: string;
    };
    ListInvitationItemDto: {
      id: number;
      code: string;
      userId: number;
      userFullName: string;
      userPhone: string;
      status: number;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
    };
    BizViewDetailDto: {
      id: number;
      code: string;
      userId: number;
      userFullName: string;
      userPhone: string;
      /**
       * @description pending: 1, accepted: 2, rejected: 3, cancelled: 4
       * @enum {number}
       */
      status: 1 | 2 | 3 | 4;
      /** Format: date-time */
      createdAt: string;
      createdBy: string;
    };
    ListMyInvitationItemDto: {
      id: number;
      code: string;
      bizName: string;
      bizCode: string;
      bizLogo: string;
      bizPhone: string;
      /**
       * @description pending: 1, accepted: 2, rejected: 3, cancelled: 4
       * @enum {number}
       */
      status: 1 | 2 | 3 | 4;
      /** Format: date-time */
      createdAt: string;
    };
    MyInvitationDetailDto: {
      id: number;
      code: string;
      bizName: string;
      bizCode: string;
      bizLogo: string;
      bizPhone: string;
      /**
       * @description pending: 1, accepted: 2, rejected: 3, cancelled: 4
       * @enum {number}
       */
      status: 1 | 2 | 3 | 4;
      /** Format: date-time */
      createdAt: string;
    };
    AddressItemDto: {
      code: number;
      name: number;
      full_name: number;
    };
    StampInfo: {
      /** @description ID tem do doanh nghiệp cấp phát, có tác dụng truy vết trong nội bộ doanh nghiệp */
      biz_stamp_id: number;
      /** @description ID tem do hệ thống cấp phát, có tác dụng truy vết toàn hệ thống */
      stamp_id: number;
      /** @description Mã tem */
      stamp_code: string;
      /** @description Số thứ tự tem trong doanh nghiệp */
      biz_count_number: number;
      /**
       * @description Trạng thái tem (GENERATED: 1, ACTIVATED: 2, RETAILED: 3, DESTROYED: 4)
       * @enum {number}
       */
      state: 1 | 2 | 3 | 4;
      /**
       * @description Chế độ hiển thị tem (showImage: 1, showDate: 2)
       * @enum {number}
       */
      display_mode: 1 | 2;
      /** @description Kích thước tem */
      size: string;
      top_text: string;
      bottom_text: string;
      center_text: string;
      image: string;
      use_expired_date: number;
      use_activation_date: number;
    };
    ProductInfo: {
      product_id: number;
      sku_id: number;
      name: string;
      public_code: string;
      gtin: string;
      hs_code: string;
      /** Format: date-time */
      activation_datetime: string;
      /** Format: date-time */
      expiration_datetime: string;
      attributes: components['schemas']['ProductAttributeDto'][];
    };
    TraceBizInfo: {
      id: number;
      type: number;
      code: string;
      name: string;
      short_name: string;
      full_name: string;
    };
    StampEventDto: {
      event_id: number;
      /** Format: date-time */
      event_date: string;
      /**
       * @description Hành động (GENERATION: 1, ACTIVATION: 2, RETAIL: 3, DESTRUCTION: 4)
       * @enum {number}
       */
      biz_step: 1 | 2 | 3 | 4;
    };
    TraceResponseDto: {
      stamp: components['schemas']['StampInfo'];
      product: components['schemas']['ProductInfo'];
      biz: components['schemas']['TraceBizInfo'];
      events: components['schemas']['StampEventDto'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AppController_getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['CurrentUserDto'];
          };
        };
      };
    };
  };
  AuthController_loginWithPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginWithPasswordDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AuthResponseDto'];
          };
        };
      };
    };
  };
  AuthController_refreshTokens: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AuthResponseDto'];
          };
        };
      };
    };
  };
  AuthController_signUpWithPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpWithPasswordDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AuthResponseDto'];
          };
        };
      };
    };
  };
  AuthController_changeBusiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeBusinessDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AuthResponseDto'];
          };
        };
      };
    };
  };
  AuthController_setDefaultBusiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeBusinessDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AuthResponseDto'];
          };
        };
      };
    };
  };
  AuthController_getZaloAuthUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['GetZaloLoginUrlResponseDto'];
          };
        };
      };
    };
  };
  AuthController_loginWithZalo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginWithZaloDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AuthResponseDto'];
          };
        };
      };
    };
  };
  UserController_createProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateProfileDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  UserController_updateProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UpdateProfileDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  UploadController_uploadBizImages: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadMultipleDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['FileUploadResponseDto'][];
          };
        };
      };
    };
  };
  UploadController_uploadStampTemplateImage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadOneDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['FileUploadResponseDto'][];
          };
        };
      };
    };
  };
  UploadController_cloneBizResource: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CloneFileDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['CloneFileResponseDto'];
          };
        };
      };
    };
  };
  BusinessController_getBusinessList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['BusinessItemDto'][];
          };
        };
      };
    };
  };
  BusinessController_getCurrentBusiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailBusinessDto'];
          };
        };
      };
    };
  };
  BusinessController_createBusiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateBusinessDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  BusinessController_updateBusiness: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBusinessDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  BizUserController_list: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        /** @description Search by full name, email, phone */
        q?: string;
        /** @description Filter by status */
        status?: number;
        /** @description Filter by role */
        role?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  BizUserController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BizUserController_lock: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BizUserController_unlock: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  BizUserController_changeRole: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeRoleDto'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProductDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['ProductDetailDto'];
          };
        };
      };
    };
  };
  ProductController_findAll: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        /** @description Product name */
        name?: string;
        /** @description Product status */
        status?: 1 | 2;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  ProductController_findAllActive: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['ProductListActiveItemDto'][];
          };
        };
      };
    };
  };
  ProductController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['ProductDetailDto'];
          };
        };
      };
    };
  };
  ProductController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProductDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['ProductDetailDto'];
          };
        };
      };
    };
  };
  ProductController_findAttributes: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['ProductAttributeDto'][];
          };
        };
      };
    };
  };
  StampTemplateController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStampTemplateDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['StampTemplateDetailDto'];
          };
        };
      };
    };
  };
  StampTemplateController_findAll: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        name?: string;
        /** @description active: 1, inactive: 2 */
        status?: components['schemas']['STAMP_TEMPLATE_STATUS'];
        /** @description 15x15-6, 25x15-4, 35x22-3, 46x34-2, 15x15-4, 20x20-3, 30x30-2, 25x15-3, 35x22-2 */
        size?: components['schemas']['STAMP_TEMPLATE_SIZE'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  StampTemplateController_findAllActive: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['StampTemplateListItemDto'][];
          };
        };
      };
    };
  };
  StampTemplateController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['StampTemplateDetailDto'];
          };
        };
      };
    };
  };
  StampTemplateController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStampTemplateDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['StampTemplateDetailDto'];
          };
        };
      };
    };
  };
  StampTemplateController_active: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  StampTemplateController_inactive: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  StampController_checkStamp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CheckStampDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['CheckStampResponseDto'];
          };
        };
      };
    };
  };
  GenerationController_generateStamp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGenerationDocDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailGenerationDocDto'];
          };
        };
      };
    };
  };
  GenerationController_generatePreactiveStamp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePreactiveDocDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailGenerationDocDto'];
          };
        };
      };
    };
  };
  GenerationController_listGenerationDoc: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        fromDate?: string;
        toDate?: number;
        templateId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  GenerationController_detailGenerationDoc: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailGenerationDocDto'];
          };
        };
      };
    };
  };
  GenerationController_getPrintUrl: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['PrintUrlDto'];
          };
        };
      };
    };
  };
  ActivationController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateActivationDocDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailActivationDocDto'];
          };
        };
      };
    };
  };
  ActivationController_findAll: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        fromDate?: string;
        toDate?: number;
        productId?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  ActivationController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailActivationDocDto'];
          };
        };
      };
    };
  };
  RetailController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRetailDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailRetailOrderDto'];
          };
        };
      };
    };
  };
  RetailController_findAll: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        fromDate?: string;
        toDate?: string;
        stampCode?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  RetailController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailRetailOrderDto'];
          };
        };
      };
    };
  };
  DestructionController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDestructionDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailDestructionDto'];
          };
        };
      };
    };
  };
  DestructionController_findAll: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        fromDate?: string;
        toDate?: string;
        stampCode?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  DestructionController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DetailDestructionDto'];
          };
        };
      };
    };
  };
  InvitationController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateInvitationDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['CreateInvitationResponseDto'];
          };
        };
      };
    };
  };
  InvitationController_search: {
    parameters: {
      query?: {
        /** @description Default value is 1 */
        page?: number;
        /** @description Default value is 20 */
        perpage?: number;
        phone?: string;
        /** @description pending: 1, accepted: 2, rejected: 3, cancelled: 4 */
        status?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['Pagination'];
          };
        };
      };
    };
  };
  InvitationController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['BizViewDetailDto'];
          };
        };
      };
    };
  };
  InvitationController_cancel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['DefaultDataType'];
          };
        };
      };
    };
  };
  MyInvitationController_search: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['ListMyInvitationItemDto'][];
          };
        };
      };
    };
  };
  MyInvitationController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['MyInvitationDetailDto'];
          };
        };
      };
    };
  };
  MyInvitationController_acceptInvitation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MyInvitationController_rejectInvitation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  LocationController_getProvinces: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AddressItemDto'][];
          };
        };
      };
    };
  };
  LocationController_getDistricts: {
    parameters: {
      query: {
        provinceCode: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AddressItemDto'][];
          };
        };
      };
    };
  };
  LocationController_getWards: {
    parameters: {
      query: {
        districtCode: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['AddressItemDto'][];
          };
        };
      };
    };
  };
  TraceController_trace: {
    parameters: {
      query: {
        code: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResponseType'] & {
            data?: components['schemas']['TraceResponseDto'];
          };
        };
      };
    };
  };
}
